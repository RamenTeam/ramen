type Query {
  me: UserSchema
  getUser(data: GetUserDto!): UserSchema
  getUsers: [UserSchema!]
  getConnectionRequest(data: GetConnectionRequestDto!): ConnectionNotificationSchema
  getNotifications: [NotificationUnion!]
  getMyNotifications: [NotificationUnion!]
  getConversation(data: GetConversationDto!): ConversationUnion
  getConversations: [ConversationUnion!]!
}

type UserSchema {
  id: ID!
  email: String!
  username: String!
  avatarPath: String!
  isVerified: Boolean!
  isBanned: Boolean!
  forgotPasswordLock: Boolean!
  bio: String!
  phoneNumber: String!
  password: String!
  firstName: String!
  lastName: String!
  status: UserStatus!
  connections: [UserSchema!]!
  conversations: [ConversationSchema!]!
  conversationsCount: Float!
  connectionsCount: Float!
  name: String!
}

"""The activity status of user"""
enum UserStatus {
  online
  offline
  busy
  none
  silence
}

type ConversationSchema {
  id: ID!
  createdAt: String!
  participants: [UserSchema!]!
  messages: [MessageSchema!]!
}

type MessageSchema {
  id: ID!
  sender: UserSchema
  message: String!
  unread: Boolean!
  createdAt: String!
}

input GetUserDto {
  userId: String!
}

type ConnectionNotificationSchema {
  id: ID!
  to: UserSchema!
  read: Boolean!
  label: String!
  createdAt: String!
  from: UserSchema!
  status: ConnectionStatusType!
}

enum ConnectionStatusType {
  """PENDING"""
  PENDING

  """ACCEPTED"""
  ACCEPTED

  """REJECTED"""
  REJECTED
}

input GetConnectionRequestDto {
  userId: String!
}

union NotificationUnion = ConnectionNotificationSchema | NotificationSchema

type NotificationSchema {
  id: ID!
  to: UserSchema!
  read: Boolean!
  label: String!
  createdAt: String!
}

union ConversationUnion = DirectConversationSchema

type DirectConversationSchema {
  id: ID!
  createdAt: String!
  participants: [UserSchema!]!
  messages: [MessageSchema!]!
}

input GetConversationDto {
  conversationId: String!
}

type Mutation {
  login(data: LoginDto!): ErrorMessage
  logout: Boolean
  register(data: RegisterDto!): ErrorMessage
  sendForgotPasswordEmail(data: SendForgotPasswordDto!): ErrorMessage
  forgotPasswordChange(data: ForgotPasswordChangeDto!): ErrorMessage
  sendConnectRequest(data: ConnectUserDto!): ErrorMessage
  updateProfile(data: UpdateProfileDto!): ErrorMessage
  acceptConnectionRequest(data: AcceptConnectionRequestDto!): ErrorMessage
  rejectConnectionRequest(data: RejectConnectionRequest!): ErrorMessage
  sendMessage(data: SendMessageDto!): ErrorMessage
  createDirectConversation(data: CreateDirectConversationDto!): ErrorMessage
}

type ErrorMessage {
  path: String!
  message: String!
}

input LoginDto {
  email: String!
  password: String!
}

input RegisterDto {
  firstName: String!
  lastName: String!
  username: String!
  email: String!
  bio: String
  password: String!
  phoneNumber: String!
  avatarPath: String
}

input SendForgotPasswordDto {
  email: String!
}

input ForgotPasswordChangeDto {
  key: String!
  newPassword: String!
}

input ConnectUserDto {
  userId: String!
}

input UpdateProfileDto {
  firstName: String
  lastName: String
  username: String
  email: String
  bio: String
  password: String
  phoneNumber: String
  avatarPath: String
}

input AcceptConnectionRequestDto {
  connectionId: String!
}

input RejectConnectionRequest {
  connectionId: String!
}

input SendMessageDto {
  conversationId: String!
  message: String!
}

input CreateDirectConversationDto {
  toId: String!
}

type Subscription {
  newNotificationAdded: NotificationUnion
  newMessageSended(data: NewMessageSendedDto!): MessageSchema
}

input NewMessageSendedDto {
  conversationId: String!
}
