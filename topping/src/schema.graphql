type Query {
  me: UserSchema
  getUser(data: GetUserDto!): UserSchema
  getUsers: [UserSchema!]
}

type UserSchema {
  id: ID!
  email: String!
  username: String!
  avatarPath: String!
  isVerified: Boolean!
  isBanned: Boolean!
  forgotPasswordLock: Boolean!
  bio: String!
  phoneNumber: String!
  password: String!
  firstName: String!
  lastName: String!
  status: UserStatus!
  connections: [UserSchema!]!
  connectionsCount: Float!
  name: String!
}

"""The activity status of user"""
enum UserStatus {
  online
  offline
  busy
  none
  silence
}

input GetUserDto {
  userId: String!
}

type Mutation {
  login(data: LoginDto!): ErrorMessage
  logout: Boolean
  register(data: RegisterDto!): ErrorMessage
  sendForgotPasswordEmail(data: SendForgotPasswordDto!): ErrorMessage
  forgotPasswordChange(data: ForgotPasswordChangeDto!): ErrorMessage
  sendConnectRequest(data: ConnectUserDto!): ErrorMessage
}

type ErrorMessage {
  path: String!
  message: String!
}

input LoginDto {
  email: String!
  password: String!
}

input RegisterDto {
  firstName: String!
  lastName: String!
  username: String!
  email: String!
  bio: String
  password: String!
  phoneNumber: String!
  avatarPath: String
}

input SendForgotPasswordDto {
  email: String!
}

input ForgotPasswordChangeDto {
  key: String!
  newPassword: String!
}

input ConnectUserDto {
  userId: String!
}

type Subscription {
  newNotificationAdded: ConversationUnion
}

union ConversationUnion = ConnectionNotificationSchema | NotificationSchema

type ConnectionNotificationSchema {
  id: ID!
  read: Boolean!
  label: String!
  createdAt: String!
  from: UserSchema!
  to: UserSchema!
  status: ConnectionStatusType!
}

enum ConnectionStatusType {
  """PENDING"""
  PENDING

  """ACCEPTED"""
  ACCEPTED

  """REJECTED"""
  REJECTED
}

type NotificationSchema {
  id: ID!
  read: Boolean!
  label: String!
  createdAt: String!
}
