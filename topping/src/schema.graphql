type UserSchema {
  id: ID!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  status: UserStatus!
  name: String!
}

"""The activity status of user"""
enum UserStatus {
  online
  offline
  busy
  none
  silence
}

type ErrorMessage {
  path: String!
  message: String!
}

input GetUserDto {
  userId: String!
}

input LoginDto {
  email: String!
  password: String!
}

input RegisterDto {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

type Query {
  getUser(data: GetUserDto!): UserSchema
  getUsers: [UserSchema!]
  me: UserSchema
}

type Mutation {
  login(data: LoginDto!): ErrorMessage
  logout: Boolean
  register(data: RegisterDto!): ErrorMessage
}
